apply plugin: "com.android.application"
apply from: '../../node_modules/react-native-unimodules/gradle.groovy'
import com.android.build.OutputFile

// Load keystore
def keystorePropertiesFile = rootProject.file("app/release.keystore.properties");
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

project.ext.react = [
    entryFile: "index.js",
    enableHermes: true,

    bundleInDebug: project.hasProperty("bundleInDebug") ? project.getProperty("bundleInDebug") : false,

    // If you use build variants it has to be like this - put your own names in there
    bundleInRelease: project.hasProperty("bundleInRelease") ? project.getProperty("bundleInRelease") : false
]
apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/@sentry/react-native/sentry.gradle"
apply from: "../../node_modules/react-native-ultimate-config/android/rnuc.gradle"

def enableSeparateBuildPerCPUArchitecture = false
def enableProguardInReleaseBuilds = false
def jscFlavor = 'org.webkit:android-jsc:+'
def enableHermes = project.ext.react.get("enableHermes", true);


android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    defaultConfig {
        applicationId "fi.nyxo.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 83
        versionName "1.5.1"
        multiDexEnabled true
        manifestPlaceholders = [
            appAuthRedirectScheme: 'fi.nyxo.app'
        ]
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a"
        }
    }
    signingConfigs {
        debug {
					storeFile file(keystoreProperties['NYXO_UPLOAD_STORE_FILE'])
					storePassword keystoreProperties['NYXO_UPLOAD_STORE_PASSWORD']
					keyAlias keystoreProperties['NYXO_RELEASE_KEY_ALIAS']
					keyPassword keystoreProperties['NYXO_UPLOAD_KEY_ALIAS']
        }
        release {
         	storeFile file(keystoreProperties['NYXO_UPLOAD_STORE_FILE'])
					storePassword keystoreProperties['NYXO_UPLOAD_STORE_PASSWORD']
					keyAlias keystoreProperties['NYXO_RELEASE_KEY_ALIAS']
					keyPassword keystoreProperties['NYXO_UPLOAD_KEY_ALIAS']
        }
    }
    buildTypes {
				debug {
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
						signingConfig signingConfigs.release
				}
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }

    packagingOptions {
        pickFirst "lib/armeabi-v7a/libc++_shared.so"
        pickFirst "lib/arm64-v8a/libc++_shared.so"
        pickFirst "lib/x86/libc++_shared.so"
        pickFirst "lib/x86_64/libc++_shared.so"
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    
    implementation "com.facebook.react:react-native:+" 
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    implementation project(':appcenter')
    implementation project(':appcenter-analytics')
    implementation project(':appcenter-crashes')
    implementation 'io.intercom.android:intercom-sdk-base:5.+'
    implementation 'me.leolin:ShortcutBadger:1.1.21@aar'
		
		addUnimodulesDependencies([exclude: ['expo-face-detector','expo-permissions']])

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
      exclude group:'com.facebook.fbjni'
    }
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
				exclude group:'com.squareup.okhttp3', module:'okhttp'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
     }  
}


// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
apply plugin: 'com.google.gms.google-services'
com.google.gms.googleservices.GoogleServicesPlugin.config.disableVersionCheck = true // takes care of bug between Codepush and Firebase

